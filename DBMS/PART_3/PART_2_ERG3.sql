select * from ORDERS;
SELECT * FROM ORDER_ITEMS;
SELECT  DATE_CREATED,ORDER_FINISHED , ROUND(DATE_CREATED - ORDERS.ORDER_FINISHED) AS DAYS_TO_PROCESS FROM ORDERS;
SELECT * FROM ORDER_ITEMS,ORDERS WHERE ORDER_ITEMS.ROWID = ORDERS.ROWID;

-- Update order items , add column days to process
ALTER TABLE ORDER_ITEMS
ADD DAYS_TO_PROCESS NUMBER(3);
ALTER TABLE ORDER_ITEMS
ADD ORDER_FINISHED DATE;
-- Insert order finished data from orders table
INSERT INTO ORDER_ITEMS(ORDER_FINISHED)
SELECT ORDER_FINISHED FROM ORDERS
    WHERE ORDERS.ROWNUM = ORDER_ITEMS.ROWNUM;
-- Finally update Days to process column
UPDATE ORDER_ITEMS
SET DAYS_TO_PROCESS = ROUND(ORDER_FINISHED - ORDER_DATE);



--  2
-- Insert Into Order Items 2 more columns
ALTER TABLE ORDER_ITEMS
ADD TOTAL_EARNED FLOAT;
-- TOTAL_EARNED = (LIST_PRICE - COST) - ((0.0001 * LIST_PRICE) * (DAYS_TO_PROCESS - 10))
UPDATE ORDER_ITEMS
SET ORDER_ITEMS.TOTAL_EARNED =
    (ORDER_ITEMS.LIST_PRICE - ORDER_ITEMS.COST) - ((0.0001 * ORDER_ITEMS.LIST_PRICE) * (ORDER_ITEMS.DAYS_TO_PROCESS - 10))
WHERE ORDER_ITEMS.ROWNUM = LIST_PRICE.ROWNUM;


--3
--  Create a new profit table
CREATE TABLE PROFIT (
  ORDER_ID NUMBER(10),
  CUSTOMER_ID NUMBER(10),
  CHANNEL VARCHAR2(10),
  AMMOUNT FLOAT
);
-- Create new deficit table
CREATE TABLE DEFICIT (
  ORDER_ID NUMBER(10),
  CUSTOMER_ID NUMBER(10),
  CHANNEL VARCHAR2(10),
  AMMOUNT FLOAT
);
-- Declare the cursor
DECLARE CURSOR pay_cursor IS select * from ORDER_ITEMS;
BEGIN
    -- OPEN CURSOR
    OPEN pay_cursor;
    -- FETCH CURSOR
LOOP
    FETCH pay_cursor INTO :TOTAL_EARNED;
    EXIT WHEN pay_cursor%NOTFOUND;
    IF pay_cursor > 0 THEN
        -- INSERT INTO PROFIT
        INSERT INTO PROFIT (ORDER_ID,CUSTOMER_ID,CHANNEL,AMMOUNT)
        VALUES (ORDER_ITEMS.ORDER_ID,ORDER_ITEMS.CUSTOMER_ID,ORDER_ITEMS.CHANNEL,ORDER_ITEMS.TOTAL_EARNED);
    ELSE
        -- INSERT INTO DEFICIT
        INSERT INTO DEFICIT (ORDER_ID,CUSTOMER_ID,CHANNEL,AMMOUNT)
        VALUES (ORDER_ITEMS.ORDER_ID,ORDER_ITEMS.CUSTOMER_ID,ORDER_ITEMS.CHANNEL,ORDER_ITEMS.TOTAL_EARNED);
    END IF;
END LOOP;
    -- Close the cursor
    CLOSE pay_cursor;
end;


-- 4
SELECT CUSTOMERS.CUSTOMER_ID,PROFIT.CUSTOMER_ID,DEFICIT.CUSTOMER_ID,CUSTOMERS.GENDER,PROFIT.AMMOUNT,DEFICIT.AMMOUNT
       FROM CUSTOMERS CUSTOMERS
CROSS JOIN PROFIT PROFIT,DEFICIT DEFICIT
ON CUSTOMERS.CUSTOMER_ID = PROFIT.PROFIT_ID = DEFICIT.DEFICIT_ID
WHERE CUSTOMERS.GENDER = 'MALE';

SELECT CUSTOMERS.CUSTOMER_ID,PROFIT.CUSTOMER_ID,DEFICIT.CUSTOMER_ID,CUSTOMERS.GENDER,PROFIT.AMMOUNT,DEFICIT.AMMOUNT
       FROM CUSTOMERS CUSTOMERS
CROSS JOIN PROFIT PROFIT,DEFICIT DEFICIT
ON CUSTOMERS.CUSTOMER_ID = PROFIT.PROFIT_ID = DEFICIT.DEFICIT_ID
WHERE CUSTOMERS.GENDER = 'FEMALE';


-- 5
SELECT ORDERS.ID , PROFIT.ORDER_ID,DEFICIT.ORDER_ID,PROFIT.AMMOUNT,DEFICIT.AMMOUNT
FROM ORDERS ORDERS
CROSS JOIN PROFIT PROFIT ,DEFICIT DEFICIT
WHERE ORDERS.ID = PROFIT.ORDER_ID = DEFICIT.ORDER_ID;





EXPLAIN PLAN FOR
select o.id , p.identifier
from products p join orders o on o.id=p.identifier
join customers c on o.customer_id=c.customer_id
where o.channel='Internet' and
c.income_level='high' and c.marital_status='unknown' and p.list_price>60;


CREATE INDEX INDEX_CUSTOMERS ON CUSTOMERS(CUSTOMER_ID,INCOME_LEVEL,MARITAL_STATUS);

CREATE INDEX INDEX_ORDERS ON ORDERS(CUSTOMER_ID,CHANNEL);

CREATE INDEX INDEX_PRODUCTS ON PRODUCTS(IDENTIFIER,LIST_PRICE);

EXPLAIN PLAN FOR
select o.id , p.identifier
from products p join orders o on o.id=p.identifier
join customers c on o.customer_id=c.customer_id
where o.channel='Internet' and p.SUBCATEGORY_REFERENCE =2042 and
c.income_level='high' and c.marital_status='unknown' and p.list_price=41.24;

SELECT * FROM PLAN_TABLE;