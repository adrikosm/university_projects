-- FUNCTIONS --

-- Map age to CUSTOMERS_AGE_CHK --
CREATE OR REPLACE FUNCTION get_age_group(birth_date DATE)
  RETURN VARCHAR2 IS
  age CONSTANT NUMBER(3) := FLOOR((CURRENT_DATE - birth_date) / 365);
  BEGIN
    IF age <= 30 THEN RETURN 'under 30';
    ELSIF age <= 40 THEN RETURN '30-40';
    ELSIF age <= 50 THEN RETURN '40-50';
    ELSIF age <= 60 THEN RETURN '50-60';
    ELSIF age <= 70 THEN RETURN '60-70';
    ELSE RETURN 'above 70';
    END IF;
  END;
/

-- Map income level to CUSTOMERS_INCOME_CHK --
CREATE OR REPLACE FUNCTION get_income_level(income CHAR)
  RETURN VARCHAR2 IS
  identifier CONSTANT CHAR(1) := SUBSTR(income, 1, 1);
  BEGIN
    IF identifier IN ('A', 'B', 'C', 'D', 'E') THEN RETURN 'low';
    ELSIF identifier IN ('F', 'G', 'H', 'I') THEN RETURN 'medium';
    ELSE RETURN 'high';
    END IF;
  END;
/

-- Map marital status to CUSTOMERS_MARRIAGE_CHK --
CREATE OR REPLACE FUNCTION fix_status(status CHAR)
  RETURN VARCHAR2 IS
  married CONSTANT CHAR(27) := '([Mm]arried|Mabsent|Mar-AF)';
  BEGIN
    IF REGEXP_LIKE(status, married) THEN RETURN 'married';
    ELSIF status IS NOT NULL THEN RETURN 'single';
    ELSE RETURN 'unknown';
    END IF;
  END;
/

-- TABLES --
BEGIN
  drop_table('ORDERS');
  drop_table('PRODUCTS');
  drop_table('CUSTOMERS');
END;
/

-- Customers --
CREATE TABLE CUSTOMERS AS
  SELECT ID AS CUSTOMER_ID, CAST(GENDER AS VARCHAR2(6)) AS GENDER,
    CAST(get_age_group(BIRTH_DATE) AS VARCHAR2(8)) AS AGEGROUP,
    CAST(fix_status(MARITAL_STATUS) AS VARCHAR2(7)) AS MARITAL_STATUS,
    CAST(get_income_level(INCOME_LEVEL) AS VARCHAR2(6)) AS INCOME_LEVEL
  FROM XSALES.CUSTOMERS;

ALTER TABLE CUSTOMERS ADD CONSTRAINT CUSTOMERS_PK
PRIMARY KEY (CUSTOMER_ID);

ALTER TABLE CUSTOMERS ADD CONSTRAINT CUSTOMERS_GENDER_CHK
CHECK (GENDER IN ('Male', 'Female'));

ALTER TABLE CUSTOMERS ADD CONSTRAINT CUSTOMERS_AGE_CHK
CHECK (AGEGROUP IN ('under 30', '30-40', '40-50',
                    '50-60', '60-70', 'above 70'));

ALTER TABLE CUSTOMERS ADD CONSTRAINT CUSTOMERS_MARRIAGE_CHK
CHECK (MARITAL_STATUS IN ('married', 'single', 'unknown'));

ALTER TABLE CUSTOMERS ADD CONSTRAINT CUSTOMERS_INCOME_CHK
CHECK (INCOME_LEVEL IN ('low', 'medium', 'high'));

-- Products --
CREATE TABLE PRODUCTS AS
  SELECT P.IDENTIFIER AS PRODUCT_ID,
    CAST(P.NAME AS VARCHAR2(50)) AS PRODUCTNAME,
    CAST(C.NAME AS VARCHAR2(50)) AS CATEGORYNAME,
    CAST(TO_NUMBER(P.LIST_PRICE) AS NUMBER(7, 2)) AS LIST_PRICE
  FROM XSALES.PRODUCTS P JOIN XSALES.CATEGORIES C
      ON P.SUBCATEGORY_REFERENCE = C.ID;

ALTER TABLE PRODUCTS
  ADD CONSTRAINT PRODUCTS_PK
PRIMARY KEY (PRODUCT_ID);

-- Orders --
CREATE TABLE ORDERS AS
  SELECT O.ID AS ORDER_ID, I.PRODUCT_ID AS PRODUCT_ID,
    O.CUSTOMER_ID AS CUSTOMER_ID,
    CAST(FLOOR(AVG((O.ORDER_FINISHED - I.ORDER_DATE)))
         AS NUMBER(4)) AS DAYS_TO_PROCESS,
    CAST(TRUNC(AVG(I.AMOUNT), 2) AS NUMBER(7, 2)) AS PRICE,
    CAST(TRUNC(AVG(I.COST), 2) AS NUMBER(7, 2)) AS COST,
    CAST(O.CHANNEL AS VARCHAR2(20)) AS CHANNEL
  FROM XSALES.ORDERS O JOIN XSALES.ORDER_ITEMS I ON O.ID = I.ORDER_ID
  GROUP BY (O.ID, I.PRODUCT_ID, O.CUSTOMER_ID, O.CHANNEL);

ALTER TABLE ORDERS ADD CONSTRAINT ORDERS_PK
PRIMARY KEY (ORDER_ID, PRODUCT_ID);

ALTER TABLE ORDERS ADD CONSTRAINT ORDERS_PRODUCT_FK
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (PRODUCT_ID);

ALTER TABLE ORDERS ADD CONSTRAINT ORDERS_CUSTOMER_FK
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (CUSTOMER_ID);

